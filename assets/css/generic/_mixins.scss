@mixin font-size($font-size, $line-height:true){
  font-size:$font-size;
  font-size:($font-size / $base-font-size)*1rem;
  @if $line-height == true{
    line-height:ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
  }
}

@mixin rem($property, $px-values) {
  // Convert the baseline into rems
  $baseline-rem: $base-font-size / 1rem * 1;
  // Print the first line in pixel values
  #{$property}: $px-values;
  // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == "number" {
    #{$property}: $px-values / $baseline-rem;
  } @else {
    // Create an empty list that we can dump values into
    $rem-values: ();
    @each $value in $px-values {
      // If the value is zero or not a number, return it
      @if $value == 0 or type-of( $value ) != "number" {
        $rem-values: append($rem-values, $value);
      } @else {
        $rem-values: append($rem-values, $value / $baseline-rem);
      }
    }
    // Return the property and its list of converted values
    #{$property}: $rem-values;
  }
}

@mixin debug-vertical-alignment($background-color: white) {
  position: relative;

  &:after {
    content: '';
    display: block;
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    pointer-events: none;
    background-image: -webkit-linear-gradient(rgba(invert($background-color), 0.2) 1px, transparent 1px);
    -webkit-background-size: 100% ($base-line-height);
  }
}
